#include "/Engine/Private/Common.ush"

// These contain various functions and structs that may be useful - not a complete list
// #include "/Engine/Generated/GeneratedUniformBuffers.ush" 
// #include "/Engine/Private/ColorUtils.ush"
// #include "/Engine/Private/Common.ush"
// #include "/Engine/Private/DeferredShadingCommon.ush"
// #include "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"
// #include "/Engine/Private/Random.ush"
// #include "/Engine/Private/SceneData.ush"
// #include "/Engine/Private/ScreenPass.ush"
#include "/Engine/Private/SceneTexturesCommon.ush"
#include "/Engine/Private/SceneTextureParameters.ush"

float2 ViewportSize;

float2 TextureSize;
float2 TextureSizeInverse;

float SobelEdgeDetection(float2 ScreenPosition)
{
	float KernelX[3][3] =
	{
		{ -1,  0,  1 },
		{ -2,  0,  2 },
		{ -1,  0,  1 }
	};

	float KernelY[3][3] =
	{
		{ -1, -2, -1 },
		{  0,  0,  0 },
		{  1,  2,  1 }
	};

	float Gx = 0.0;
	float Gy = 0.0;

	// Sample 3x3 neighborhood
	for (int i = -1; i <= 1; i++)
	{
		for (int j = -1; j <= 1; j++)
		{
			float2 OffsetScreenPosition = ScreenPosition + float2(i, j);
			float Stencil = CalcSceneCustomStencil(OffsetScreenPosition);

			Gx += Stencil * KernelX[i + 1][j + 1];
			Gy += Stencil * KernelY[i + 1][j + 1];
		}
	}

	return (Gx * Gx + Gy * Gy);
}

float2 PointSampleUV(float2 UV)
{
	return (floor(UV * TextureSize) + 0.5) * TextureSizeInverse;
}

float PackTwoNormalizedFloats(float A, float B)
{
	int precision = 4096;
	int precisionminusone = precision - 1;

	A = floor(A * precisionminusone);
	B = floor(B * precisionminusone);

	return (A * precision) + B;
}

float4 MainPS(float4 SvPosition : SV_POSITION) : SV_Target0 {
	float4 Color = float4(0.0, 0.0, 0.0, 0.0);

	const float2 PixelPosition = SvPosition.xy;
	const float2 UV = PointSampleUV(PixelPosition * TextureSizeInverse);
	const float2 ScreenPosition = UV * ViewportSize;

	Color = float4(0.0, 0.0, 0.0, 0.0);

	int StencilValue = CalcSceneCustomStencil(ScreenPosition);
	if (StencilValue > 0)
	{
		if (SobelEdgeDetection(ScreenPosition) > 0)
		{
			float PackedUV = PackTwoNormalizedFloats(UV.x, UV.y);
			Color = float4(PackedUV, StencilValue, 0.0, 1.0);
		}
	}

	return Color;
}
